@model Note
<!doctype html>
<html lang="en">

<head>
    <title>@Model.Name</title>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
</head>
<style>
    * {
        margin: 0;
        padding: 0;
    }

    body {
        padding: 30px;
        overflow: hidden;
    }

    canvas {
        box-shadow: -3px 2px 9px 6px black;
        cursor: pointer;
    }

    .tools {
        display: flex;
        justify-content: center;
        flex-direction: row;
        margin-top: 15px;
    }

    .tools .color-field {
        height: 40px;
        width: 40px;
        min-height: 40px;
        min-width: 40px;
        cursor: pointer;
        display: inline-block;
        box-sizing: border-box;
        border-radius: 50%;
        border: 2px solid white;
        align-self: center;
        margin: 0 10px;
    }

    .tools .button {
        align-self: center;
        width: 100px;
        height: 40px;
        border: 2px solid white;
        cursor: pointer;
        color: white;
        background: #222;
        font-wight: bold;
        margin: 0 10px;
    }

    .color-picker {
        align-self: center;
        margin: 0 10px;
        height: 50px;
    }

    .pen-range {
        align-self: center;
        margin: 0 10px;
    }
</style>

<body>

    @RenderBody()



    <script type="text/javascript">
        const canvas = document.getElementById("canvas");
        canvas.width = window.innerWidth - 60;
        canvas.height = window.innerHeight - 150;
        var context = canvas.getContext("2d");

        let start_background_color = "white";

        let draw_color = "black";
        let draw_width = "2";
        let is_drawing = false;

        let restore_array = [];
        let index = -1;

        window.onload = function () {
            var img = document.getElementById("imgid");
            context.drawImage(img, 0, 0);
        }

        canvas.addEventListener("touchstart", start, false);
        canvas.addEventListener("touchmove", draw, false);
        canvas.addEventListener("mousedown", start, false);
        canvas.addEventListener("mousemove", draw, false);

        canvas.addEventListener("touchend", stop, false);
        canvas.addEventListener("mouseup", stop, false);
        canvas.addEventListener("mouseout", stop, false);


        function start(event) {
            is_drawing = true;
            context.beginPath();
            context.moveTo(event.clientX - canvas.offsetLeft,
                event.clientY - canvas.offsetTop);
            event.preventDefault();
        }

        function draw(event) {
            if (is_drawing) {
                context.lineTo(event.clientX - canvas.offsetLeft,
                    event.clientY - canvas.offsetTop);
                context.strokeStyle = draw_color;
                context.lineWidth = draw_width;
                context.lineCap = "round";
                context.lineJoin = "round";
                context.stroke();
            }
            event.preventDefault();
        }

        function stop(event) {
            if (is_drawing) {
                context.stroke();
                context.closePath();
                is_drawing = false;
            }
            event.preventDefault();

            if (event.type != 'mouseout') {
                console.log(context.getImageData(0, 0, canvas.width, canvas.height));
                restore_array.push(context.getImageData(0, 0, canvas.width, canvas.height));
                index += 1;
            }
        }

        function clearCanvas() {
            context.fillStyle = start_background_color;
            context.clearRect(0, 0, canvas.width, canvas.height);
            context.fillRect(0, 0, canvas.width, canvas.height);

            restore_array = [];
            index = -1;
        }

        function undoLast() {
            if (index <= 0) {
                clearCanvas();
            } else {
                index -= 1;
                restore_array.pop();
                context.putImageData(restore_array[index], 0, 0);
            }
        }

        const exportImg = (e) => {
            const dataUrl = canvas.toDataURL();
            document.getElementById("ImgURL").value = dataUrl;
        }

    </script>


    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
        integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
        integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
        crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
        integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
        crossorigin="anonymous"></script>
</body>

</html>